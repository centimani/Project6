$(function() {

   describe('RSS Feeds', function() {
    /*Test 7-Checks to see if allFeeds is defined AND it's length is greater than zero*/
    it('are defined', function() {
      expect(allFeeds).toBeDefined();
      expect(allFeeds.length).not.toBe(0);
    });
    /*Test 8- Iterates through all of allFeeds and checks to make sure the URL is defined and not "" or empty */
    it('URL is not empty', function(){
      for (i=0; i < allFeeds.length; i++){
        expect(allFeeds[i].url).toBeDefined();
        expect(allFeeds[i].url).not.toBe("");
      }
    });
    /*Test 9- Checks to make sure the Article Name is defined and not empty "" */
    it('Name is not empty', function(){
      for (i=0; i < allFeeds.length; i++){
        expect(allFeeds[i].name).toBeDefined();
        expect(allFeeds[i].name).not.toBe("");
      }
    });
  });
  /*Test 10-Tests Menu functionality. in the beforeEach we make sure that the click event is being spied on and we defined our button value to moniter it's events*/
  describe('The Menu', function(){
    var menuIcon= $('.menu-icon-link');
    var bodyElement = document.body;
    beforeEach(function() {
      spyOn(menuIcon,'click');
    });
    /*Test 11- Tests to make sure that the Menu is hidden by Default. Done by checking the body elements's class name*/
    it('Menu is hidden by default', function(){
      expect(document.body.className).toBe("menu-hidden");
    });
    /*Test 12- Tests to make sure that when the button is clicked a first time that the menu becomes visible, and when it's clicked a second time, it becomes hidden again.*/
    describe('When Clicked', function(){
     
        it('First click turns the Menu on, Second turns the Menu off', function(){
          menuIcon.click();
          expect(menuIcon.click).toHaveBeenCalled();
          expect(document.body.className).toBeUndefined;
          menuIcon.click();
          expect(menuIcon.click).toHaveBeenCalled();
          expect(document.body.className).toBe("menu-hidden");
        });
    });
  });

  /*Test 13- Checks on the Load Feed functionality and initial entries. In the beforeEach, we check to be sure that the loadFeed async function has already been called and finished before doing our tests. Then we also attach a spy to the loadFeed function*/
  describe('Initial Entries', function(){
    
    beforeEach(function(done){
      loadFeed(0,function(){
        done();
      });
      spyOn(window, 'loadFeed');
    });
    /*Test 14- Checks to see if loadFeed is called(via Spy), completed (checked by the done() function. and there is at least one entry generated by loadFeed(by populating an Array with all the entries and making sure it's legnth is greater than zero).*/
    it('LoadFeed is called, completed, and there is at least a single entry', function(done){
        expect(window.loadFeed).toHaveBeenCalled();
        var entryArray= document.getElementsByClassName('entry');
        expect(entryArray.length).toBeGreaterThan(0);
        done();
    });
  });

  /*New Feed selection, testing to make sure we have unique content after it finishes loading. Again, making sure our async function loadFeed is completed before we run our tests and also that our spy is active on loadFeed*/
  describe('New Feed Selection', function(){
    var feedContent1;
    var feedContent2;
    /*For Clarification, this calls the load feed content, saves what is inside the feed, then calls the second load feed, and then saves whats inside the feed, then we compare the two versions to be sure that they are not the same*/
    beforeEach(function(done){
      loadFeed(0, function(){
        feedContent1=$('.feed').html();
        
        loadFeed(1,function(){
          feedContent2=$('.feed').html();
          done();
        });
      spyOn(window,'loadFeed');
      });
    });

    it('Content actually changes when it finishes loading',function(done){
      expect(feedContent1).not.toEqual(feedContent2);
      done();
    });
  });
}());
